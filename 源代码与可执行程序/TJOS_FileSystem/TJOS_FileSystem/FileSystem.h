#pragma once

#include "INode.h"
#include "Buf.h"
#include "BufferManager.h"

/* 文件系统存储资源管理块(Super Block)的定义。*/
class SuperBlock
{
public:
	const static int MAX_FREE = 100;
	const static int MAX_INODE = 100;

public:
	int		s_isize;		/* 外存Inode区占用的盘块数2~1023，1022块 */
	int		s_fsize;		/* 数据区盘块总数 16384 */

	int		s_nfree;		/* 直接管理的空闲盘块数量 */
	int		s_free[MAX_FREE];	/* 直接管理的空闲盘块索引表，最多100 */
	int		s_ninode;		/* 直接管理的空闲外存Inode数量 */
	int		s_inode[MAX_INODE];	/* 直接管理的空闲外存Inode索引表，最多100 */

	int		s_fmod;			/* 内存中super block副本被修改标志，意味着需要更新外存对应的Super Block */
	int		s_time;			/* 最近一次更新时间 */
	int		padding[50];	/* 填充使SuperBlock块大小等于1024字节，占据2个扇区 */

public:
	SuperBlock() 
	{
		//nothing much
	}
	~SuperBlock()
	{
		//nothing much
	}
};

/* 文件系统类(FileSystem)管理文件存储设备中
 * 的各类存储资源，磁盘块、外存INode的分配、
 * 释放。*/
class FileSystem
{
public:
	/*磁盘的空间管理*/
	static const int BLOCK_SIZE = 512;				//Block块大小，单位字节
	static const int DISK_SECTOR_NUMBER = 16384;	//磁盘所有扇区数 8MB / 512B = 16384  
	static const int SUPERBLOCK_START_SECTOR = 0;	//定义SuperBlock位于磁盘上的扇区号，占据两个扇区

	static const int INODE_ZONE_START_SECTOR = 2;	//外存Inode区位于磁盘上的起始扇区号
	static const int INODE_ZONE_SIZE = 1022;		//磁盘上外存Inode区占据的扇区数 
	static const int INODE_SIZE = sizeof(DiskInode);//64字节
	static const int INODE_NUMBER_PER_SECTOR = BLOCK_SIZE / INODE_SIZE;//外存INode对象长度为64字节，每个磁盘块可以存放512/64 = 8个外存INode

	static const int ROOT_INODE_NO = 0;									//文件系统根目录外存INode编号
	static const int INODE_NUMBER_ALL = INODE_ZONE_SIZE * INODE_NUMBER_PER_SECTOR;	//外存INode的总数

	static const int DATA_ZONE_START_SECTOR = INODE_ZONE_START_SECTOR + INODE_ZONE_SIZE;	//数据区的起始扇区号
	static const int DATA_ZONE_END_SECTOR = DISK_SECTOR_NUMBER - 1;		//数据区的结束扇区号
	static const int DATA_ZONE_SIZE = DISK_SECTOR_NUMBER - DATA_ZONE_START_SECTOR;	//数据区占据的扇区数量

	DiskDriver* diskDriver;
	SuperBlock* superBlock;
	BufferManager* bufManager;

	FileSystem();
	~FileSystem();

	void FormatSuperBlock();//格式化SuperBlock
	void FormatDevice();    //格式化整个文件系统

	/* 在操作系统初始化时，会将磁盘的SuperBlock读入一个内存的SuperBlock副本，以便于内核以更快的速度随时访问内存副本。
	一旦内存中的副本发生变化，会通过设置s_fmod标志，由内核将内存副本写入磁盘 */
	void LoadSuperBlock();  //系统初始化时读入SuperBlock
	void Update();          //将SuperBlock对象的内存副本更新到存储设备的SuperBlock中去

	/* 磁盘Inode节点的分配与回收算法设计与实现 */
	Inode* IAlloc();        //在存储设备上分配一个空闲外存INode，一般用于创建新的文件
	void IFree(int number); //释放编号为number的外存INode，一般用于删除文件

	Buf* Alloc();			//在存储设备上分配空闲磁盘块   
	void Free(int blkno);   //释放存储设备上编号为blkno的磁盘块
};

/* DiskINode节点的索引结构 32B*/
class DirectoryEntry
{
public:
	static const int DIRSIZ = 28;

public:
	int m_ino;                   //目录项中INode编号部分，即对应文件在块设备上的外存索引节点号
	char name[DIRSIZ];           //目录项中路径名部分

public:
	DirectoryEntry() 
	{
		//nothing much
	}
	~DirectoryEntry()
	{
		//nothing much
	}
};